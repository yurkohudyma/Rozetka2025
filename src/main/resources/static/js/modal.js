/*


document.addEventListener('DOMContentLoaded', function () {
    const select = document.getElementById('category_input');
    checkAddNew(select); // –æ–¥—Ä–∞–∑—É —Ç—Ä–∏–≥–µ—Ä–∏–º–æ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
});

document.querySelector('#addProductModal form').addEventListener('submit', function (e) {
    const attrContainer = document.getElementById('attributesContainer');
    const hasAttributes = attrContainer.querySelectorAll('.dynamic-attribute').length > 0;

    if (!hasAttributes) {
        e.preventDefault();
        alert("–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞—Ç—Ä–∏–±—É—Ç –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Ç–æ–≤–∞—Ä—É!");
    }
});

document.querySelector('#addProductModal form').addEventListener('submit', (e) => {
    const select = document.getElementById('category_input');
    const newCatInput = document.getElementById('newValueInput');

    if (select.value === '__add__') {
        const newCatName = newCatInput.value.trim();
        if (!newCatName) {
            e.preventDefault();
            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ—Å–Ω—É—é—á—É.');
            return;
        }

        // üëâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ –≤–∏–±–∏—Ä–∞—î–º–æ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        addNewOption();
    }
});

function checkAddNew(select) {
    const value = select.value;
    const addNewWrapper = document.getElementById('addNewWrapper');
    const newAttrSection = document.getElementById('newAttributeSection');
    const attrContainer = document.getElementById('attributesContainer');

    if (value === '__add__') {
        addNewWrapper.style.display = 'block';
        attrContainer.innerHTML = ''; // –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ
        newAttrSection.style.display = 'block';
    } else {
        addNewWrapper.style.display = 'none';
        newAttrSection.style.display = 'block';
        getAllCatAttribs(value);
    }
}

function addNewOption() {
    const input = document.getElementById("newValueInput");
    const value = input.value.trim();
    const select = document.getElementById("category_input");

    if (!value) {
        alert("–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è");
        return;
    }

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –æ–ø—Ü—ñ—é
    const newOption = document.createElement("option");
    newOption.text = value;
    newOption.value = value;

    // –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ—é (—â–æ–± –Ω–µ –ø—ñ—Å–ª—è "+ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ")
    select.insertBefore(newOption, select.options[select.options.length - 1]);

    // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —è–∫ –≤–∏–±—Ä–∞–Ω–µ
    select.value = value;

    // üëâ –î–æ–¥–∞—Ç–∏ —Ü–µ–π –≤–∏–∫–ª–∏–∫, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ DOM
    checkAddNew(select);

    // –°—Ö–æ–≤–∞—Ç–∏ –±–ª–æ–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ –æ—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª–µ
    document.getElementById("addNewWrapper").style.display = "none";
    input.value = "";
}


function getAllCatAttribs(categoryName) {
    const encodedCategory = encodeURIComponent(categoryName);

    fetch(`/api/attributes/getCatAttribsWithUnitsFetched?catName=${encodedCategory}`)
      .then(res => res.json())                // –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É JSON
      .then(data => {
        console.log(data);                    // –≤–∏–≤–æ–¥–∏–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        renderAttributes(data);               // –¥–∞–ª—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ
      })
      .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤:', err));
}

function renderAttributes(attributes) {
    const container = document.getElementById('attributesContainer');
    container.innerHTML = ''; // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î

    attributes.forEach((attr, index) => {
        const wrapper = document.createElement('div');
        wrapper.classList.add('dynamic-attribute');

        // HTML –¥–ª—è —ñ–Ω–ø—É—Ç—É —Ç–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö –ø–æ–ª—ñ–≤
        wrapper.innerHTML = `
            <label>${attr.attributeName}:</label>
            <input type="text" name="attributeList[${index}].attribValue" value="${attr.attribValue || ''}" class="attrib-input">
            <input type="hidden" name="attributeList[${index}].attrName" value="${attr.attrName}">
            <input type="hidden" name="attributeList[${index}].attributeType" value="${attr.attributeType}">
            <input type="hidden" name="attributeList[${index}].attribUnit" value="${attr.attribUnit || ''}">
        `;

        container.appendChild(wrapper);

        // –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–µ–ª–µ–∫—Ç —ñ–∑ –æ–¥–∏–Ω–∏—Ü—è–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞
        getAllAttribUnits(attr, index);
    });
}

function getAllAttribUnits(attribute, index) {
    const wrapper = document.querySelectorAll('.dynamic-attribute')[index];
    if (!wrapper) return;

    const encodedAttribName = encodeURIComponent(attribute.attributeName);

    fetch(`/api/attributes/getAllAttribUnits?attribName=${encodedAttribName}`)
        .then(res => res.json())
        .then(attr => {
            const hiddenUnitInput = wrapper.querySelector(`input[name="attributeList[${index}].attribUnit"]`);
            const valueInput = wrapper.querySelector(`input[name="attributeList[${index}].attribValue"]`);
            console.log (attr)

            // === –í–∏–ø–∞–¥–æ–∫ 1: –Ñ –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ª", "–º–ª") ===
            if (attr.units && attr.units.length > 0) {
                const select = document.createElement('select');
                select.classList.add('attrib-select');

                attr.units.forEach(u => {
                    const opt = document.createElement('option');
                    opt.value = u;
                    opt.textContent = u;
                    select.appendChild(opt);
                });

                // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–µ—Ä—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                if (!hiddenUnitInput.value) {
                    hiddenUnitInput.value = attr.units[0];
                }
                select.value = hiddenUnitInput.value;

                select.addEventListener('change', () => {
                    hiddenUnitInput.value = select.value;
                });
                wrapper.appendChild(select);
            }

            // === –í–∏–ø–∞–¥–æ–∫ 2: –ù–µ–º–∞—î –æ–¥–∏–Ω–∏—Ü—å, –∞–ª–µ —î —Å–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫—Ä–∞—ó–Ω–∏) ===
            else if (attr.values && attr.values.length > 0) {
                const select = document.createElement('select');
                select.classList.add('attrib-select');

                attr.values.forEach(v => {
                    const opt = document.createElement('option');
                    opt.value = v;
                    opt.textContent = v;
                    select.appendChild(opt);
                });

                // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                if (!valueInput.value) {
                    valueInput.value = attr.values[0];
                }
                select.value = valueInput.value;

                select.addEventListener('change', () => {
                    valueInput.value = select.value;
                });

                wrapper.appendChild(select);
            }

            // === –í–∏–ø–∞–¥–æ–∫ 3: –ù—ñ –æ–¥–∏–Ω–∏—Ü—å, –Ω—ñ —Å–ø–∏—Å–∫—É ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π input ===
            else {
                // –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ ‚Äî input —É–∂–µ —î
            }
        })
        .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∞:', err));
}




function addNewAttribute() {
    const name = document.getElementById('newAttrName').value.trim();
    const value = document.getElementById('newAttrValue').value.trim();
    const unit = document.getElementById('newAttrUnit').value.trim();
    const type = document.getElementById('newAttrType').value;

    if (!name || !value) {
        alert('–ù–∞–∑–≤–∞ —ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ç—Ä–∏–±—É—Ç—É –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ');
        return;
    }

    const container = document.getElementById('attributesContainer');
    const index = container.children.length;

    const wrapper = document.createElement('div');
    wrapper.classList.add('dynamic-attribute');

    wrapper.innerHTML = `
        <label>${name}:</label>
        <input type="text" name="attributeList[${index}].attribValue" value="${value}">
        <input type="hidden" name="attributeList[${index}].attrName" value="${name}">
        <input type="hidden" name="attributeList[${index}].attributeType" value="${type}">
        <input type="hidden" name="attributeList[${index}].attribUnit" value="${unit}">
    `;

    container.appendChild(wrapper);

    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª—è
    document.getElementById('newAttrName').value = '';
    document.getElementById('newAttrValue').value = '';
    document.getElementById('newAttrUnit').value = '';
}
*/
document.addEventListener('DOMContentLoaded', function () {
  const select = document.getElementById('category_input');
  checkAddNew(select);
});

document.querySelector('#addProductModal form').addEventListener('submit', function (e) {
  const attrContainer = document.getElementById('attributesContainer');
  const hasAttributes = attrContainer.querySelectorAll('.dynamic-attribute').length > 0;
  if (!hasAttributes) {
    e.preventDefault();
    alert("–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∞—Ç—Ä–∏–±—É—Ç –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Ç–æ–≤–∞—Ä—É!");
  }
});

document.querySelector('#addProductModal form').addEventListener('submit', (e) => {
  const select = document.getElementById('category_input');
  const newCatInput = document.getElementById('newValueInput');
  if (select.value === '__add__') {
    const newCatName = newCatInput.value.trim();
    if (!newCatName) {
      e.preventDefault();
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å —ñ—Å–Ω—É—é—á—É.');
      return;
    }
    addNewOption();
  }
});

function checkAddNew(select) {
  const value = select.value;
  const addNewWrapper = document.getElementById('addNewWrapper');
  const newAttrSection = document.getElementById('newAttributeSection');
  const attrContainer = document.getElementById('attributesContainer');

  if (value === '__add__') {
    addNewWrapper.style.display = 'block';
    attrContainer.innerHTML = '';
    newAttrSection.style.display = 'block';
  } else {
    addNewWrapper.style.display = 'none';
    newAttrSection.style.display = 'block';
    getAllCatAttribs(value);
  }
}

function addNewOption() {
  const input = document.getElementById("newValueInput");
  const value = input.value.trim();
  const select = document.getElementById("category_input");
  if (!value) {
    alert("–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è");
    return;
  }
  const newOption = document.createElement("option");
  newOption.text = value;
  newOption.value = value;
  select.insertBefore(newOption, select.options[select.options.length - 1]);
  select.value = value;
  checkAddNew(select);
  document.getElementById("addNewWrapper").style.display = "none";
  input.value = "";
}

function getAllCatAttribs(categoryName) {
  const encodedCategory = encodeURIComponent(categoryName);
  fetch(`/api/attributes/getCatAttribsWithUnitsFetched?catName=${encodedCategory}`)
    .then(res => res.json())
    .then(data => {
      console.log("–û—Ç—Ä–∏–º–∞–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", data);
      renderAttributes(data);
    })
    .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤:', err));
}

function renderAttributes(attributes) {
  const container = document.getElementById('attributesContainer');
  container.innerHTML = '';

  attributes.forEach((attr, index) => {
    const wrapper = document.createElement('div');
    wrapper.classList.add('dynamic-attribute');

    wrapper.innerHTML = `
      <label>${attr.attributeName}:</label>
      <input type="text" name="attributeList[${index}].attribValue" value="${attr.attributeValue || ''}" class="attrib-input">
      <input type="hidden" name="attributeList[${index}].attrName" value="${attr.attributeName}">
      <input type="hidden" name="attributeList[${index}].attributeType" value="${attr.attributeType}">
      <input type="hidden" name="attributeList[${index}].attribUnit" value="">
    `;

    container.appendChild(wrapper);

    // –ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ ‚Äî –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–µ–ª–µ–∫—Ç –æ–¥–∏–Ω–∏—Ü—å
    getAllAttribUnits(attr, index);
  });
}

function getAllAttribUnits(attribute, index) {
  const wrapper = document.querySelectorAll('.dynamic-attribute')[index];
  if (!wrapper) return;

  const encodedAttribName = encodeURIComponent(attribute.attributeName);

  fetch(`/api/attributes/getAllAttribUnits?attribName=${encodedAttribName}`)
    .then(res => res.json())
    .then(units => {
      console.log(`–û–¥–∏–Ω–∏—Ü—ñ –¥–ª—è ${attribute.attributeName}:`, units);

      const hiddenUnitInput = wrapper.querySelector(`input[name="attributeList[${index}].attribUnit"]`);
      const valueInput = wrapper.querySelector(`input[name="attributeList[${index}].attribValue"]`);

      // –Ø–∫—â–æ API –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –æ–¥–∏–Ω–∏—Ü—å
      if (Array.isArray(units) && units.length > 0) {
        const select = document.createElement('select');
        select.classList.add('attrib-select');

        units.forEach(u => {
          const opt = document.createElement('option');
          opt.value = u;
          opt.textContent = u;
          select.appendChild(opt);
        });

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        hiddenUnitInput.value = units[0];

        select.addEventListener('change', () => {
          hiddenUnitInput.value = select.value;
        });

        wrapper.appendChild(select);
      }
    })
    .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–¥–∏–Ω–∏—Ü—å –∞—Ç—Ä–∏–±—É—Ç—É:', err));
}

function addNewAttribute() {
  const name = document.getElementById('newAttrName').value.trim();
  const value = document.getElementById('newAttrValue').value.trim();
  const unit = document.getElementById('newAttrUnit').value.trim();
  const type = document.getElementById('newAttrType').value;

  if (!name || !value) {
    alert("–ù–∞–∑–≤–∞ —ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ç—Ä–∏–±—É—Ç—É –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ");
    return;
  }

  const container = document.getElementById('attributesContainer');
  const index = container.children.length;
  const wrapper = document.createElement('div');
  wrapper.classList.add('dynamic-attribute');

  wrapper.innerHTML = `
    <label>${name}:</label>
    <input type="text" name="attributeList[${index}].attribValue" value="${value}">
    <input type="hidden" name="attributeList[${index}].attrName" value="${name}">
    <input type="hidden" name="attributeList[${index}].attributeType" value="${type}">
    <input type="hidden" name="attributeList[${index}].attribUnit" value="${unit}">
  `;

  container.appendChild(wrapper);

  document.getElementById('newAttrName').value = '';
  document.getElementById('newAttrValue').value = '';
  document.getElementById('newAttrUnit').value = '';
}
